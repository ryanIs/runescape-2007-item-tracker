/**
 * Main application file for the application.
 */

import React from 'react'
import fetchJsonp from 'fetch-jsonp'
import itemNames from './json/Names.json'
import itemBank from './json/Ids.json'
import Items from './components/Items/Items'
import Item from './components/Item/Item'
import './css/App.css'

function consoleLog(message) {
  console.log(message)
}

/**
 * This is the main section of code for the RuneScape app.
 * 
 * @returns {Object} - Object containing the react output.
 */
class App extends React.Component {

  BASE_URL = 'http://services.runescape.com/m=itemdb_oldschool/'
  // ITEM_DATABASE_API_PREFIX = BASE_URL + 'api/catalogue/detail.json?item='
  ITEM_DATABASE_API_PREFIX = this.BASE_URL + 'results.ws?query='

  constructor(props) {
    super(props)

    let itemsObject = {}

    for(let i of itemNames) {
      itemsObject[i] = 1
    }

    this.state = {
      searchText: '',
      visibleItems: itemsObject
    }
  }

  /**
   * Handles new changes to the header search text and filters through 
   * items based on the search text.
   * 
   * @param {Object} event - The on change event generated by the text-field update.
   */
  handleSearchTextChange = (event) => {

    // Set search value
    this.setState({
      searchText: event.target.value,
      items: []
    })

    // Get call-by-value copy of object
    let objVisibleItems = Object.assign({}, this.state.visibleItems)

    // Set visibility based on search result
    for(let i of itemNames) {

      if(i.match(new RegExp(this.state.searchText, "i"))) {
        objVisibleItems[i] = 1
      } else {
        objVisibleItems[i] = 0
      }

    }

    // Set state object
    this.setState({
      visibleItems: objVisibleItems
    })

  }

  /**
   * Adds a new item to watch based on the name.
   */
  addItem = (itemName) => {
    
    let myItemId = itemBank[itemName]
    let myItemData = this.getItemData(itemName)

    let arrItems = this.state.items || []
    arrItems.push(myItemData)

    this.setState({
      items: arrItems
    })

  }

  getItemData(itemName) {

    let output = {}
    let destination = this.ITEM_DATABASE_API_PREFIX + itemName

    let methods = {
      headers: {
      },
    }

    function ajax_get(url, callback) {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                try {
                    var data = xmlhttp.responseText;
                        
                } catch(err) {
                    console.log(err.message + " in " + xmlhttp.responseText);
                    return;
                }
                callback(data);
            }
        };
    
        xmlhttp.open("GET", url, true);
        xmlhttp.setRequestHeader("Access-Control-Allow-Origin", "*")
        xmlhttp.setRequestHeader("Content-Type", "text/plain")
        xmlhttp.send();
    }

    ajax_get(destination, function(data) {
        console.log(data);
    });

    // fetch(destination, methods)
    // .then(response => {
    //   return response.json()
    // })
    // .then(response => {
    //   console.log(response)
    // })
    // .catch(error => {
    //   consoleLog(error)
    //   output = null
    // })

    // fetchJsonp(destination)
    // .then(function(response) {
    //   return response.json()
    // })
    // .then(function(json) {
    //   console.log('parsed json', json)
    // })
    // .catch(function(ex) {
    //   console.log('parsing failed', ex)
    // })

  }

  renderItems() {
    if(this.state.items != null) {
      return(
        <div>
        {
          this.state.items.map((e) => {
            return e
          })
        }
        </div>
      )
    }
  }


  render() {
    return (
      <div className="App">

        <div className="header">
          <input className="item-input" type="text" value={this.state.searchText} onChange={this.handleSearchTextChange} />
        </div>

        <Items itemNames={itemNames} visibleItems={this.state.visibleItems} itemClick={this.addItem} />

        <div className="item-container">
          {this.renderItems()}
        </div>

      </div>
    )
  }
}

export default App
